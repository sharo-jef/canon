struct TypeCheckTest {
    value: int
    name: string
    
    get invalidGetter(): string {
        value  // int を string として返そうとする - エラーになるべき
    }
    
    fun testBinaryOps() {
        val result1 = "hello" + "world"  // OK: string + string
        val result2 = 1 + 2  // OK: int + int
        val result3 = "hello" + 42  // ERROR: string + int
    }
    
    fun testRangeOps() {
        val range1 = 1..10  // OK: int range
        val range3 = "a".."z"  // ERROR: string range
        val range4 = 1..10 step 2  // OK: int step
        val range5 = 1..10 step "hello"  // ERROR: string step
    }
    
    fun testComparisons() {
        val comp1 = 1 < 2  // OK: int comparison
        val comp2 = "a" < "b"  // OK: string comparison  
        val comp3 = 1 < "hello"  // ERROR: mixed type comparison
        val comp4 = true && false  // OK: bool logic
        val comp5 = 1 && 2  // ERROR: int logic
    }
}

infix fun string.invalidOp(other: int): string {
    this + other  // ERROR: string + int
}

val test1 = "hello" invalidOp 42  // パラメータ型は正しいが、実装内で型エラー
