{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Canon",
  "scopeName": "source.canon",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#schema-directive"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#template-strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#booleans"
    },
    {
      "include": "#annotations"
    },
    {
      "include": "#identifiers"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.canon",
          "match": "//.*$"
        },
        {
          "name": "comment.line.hash.canon",
          "match": "#.*$"
        },
        {
          "name": "comment.block.canon",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "name": "comment.block.canon",
              "match": "."
            }
          ]
        }
      ]
    },
    "schema-directive": {
      "name": "keyword.control.import.canon",
      "match": "\\b#schema\\b"
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.canon",
          "match": "\\b(if|else)\\b"
        },
        {
          "name": "storage.type.canon",
          "match": "\\b(schema|struct|union|type|val|var|fun|init|private|get|repeated|use|infix|mixin)\\b"
        },
        {
          "name": "constant.language.canon",
          "match": "\\b(this|not|null)\\b"
        }
      ]
    },
    "types": {
      "name": "support.type.canon",
      "match": "\\b(string|int|float|bool)\\b"
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.canon",
          "match": "(=|\\+=|-=|\\*=|/=|%=|\\*\\*=)"
        },
        {
          "name": "keyword.operator.comparison.canon",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.canon",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.bitwise.canon",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.arithmetic.canon",
          "match": "(\\+|-|\\*|/|%|\\*\\*)"
        },
        {
          "name": "keyword.operator.range.canon",
          "match": "(\\.\\.\\.?=?)"
        },
        {
          "name": "keyword.operator.spread.canon",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.pipeline.canon",
          "match": "\\|>"
        },
        {
          "name": "keyword.operator.arrow.canon",
          "match": "->"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.canon",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.canon",
              "match": "\\\\[\\\\\"'nrtbf]"
            }
          ]
        },
        {
          "name": "string.quoted.double.canon",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.canon",
              "match": "\\\\[\\\\\"'nrtbf]"
            }
          ]
        }
      ]
    },
    "template-strings": {
      "name": "string.template.canon",
      "begin": "`",
      "end": "`",
      "patterns": [
        {
          "name": "meta.template.expression.canon",
          "begin": "\\$\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#keywords"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#identifiers"
            }
          ]
        },
        {
          "name": "variable.other.canon",
          "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "numbers": {
      "name": "constant.numeric.canon",
      "match": "\\b[0-9]+\\b"
    },
    "booleans": {
      "name": "constant.language.boolean.canon",
      "match": "\\b(true|false)\\b"
    },
    "annotations": {
      "name": "storage.type.annotation.canon",
      "match": "@[a-zA-Z_][a-zA-Z0-9_]*"
    },
    "identifiers": {
      "name": "variable.other.canon",
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.definition.bracket.canon",
          "match": "[\\[\\]\\{\\}\\(\\)]"
        },
        {
          "name": "punctuation.separator.canon",
          "match": "[,;]"
        },
        {
          "name": "punctuation.accessor.canon",
          "match": "\\."
        },
        {
          "name": "punctuation.definition.type.canon",
          "match": ":"
        },
        {
          "name": "punctuation.definition.optional.canon",
          "match": "\\?"
        }
      ]
    }
  }
}
